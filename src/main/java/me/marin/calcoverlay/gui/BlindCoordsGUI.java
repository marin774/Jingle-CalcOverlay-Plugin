package me.marin.calcoverlay.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import lombok.Getter;
import me.marin.calcoverlay.io.CalcOverlaySettings;
import me.marin.calcoverlay.util.CalcOverlayUtil;
import me.marin.calcoverlay.util.OverlayUtil;

import javax.swing.*;
import java.awt.*;
import java.util.Locale;

public class BlindCoordsGUI {

    @Getter
    private JPanel mainPanel;
    private JPanel blindCorodsPanel;

    public BlindCoordsGUI(int xNether, int zNether, String evaluation, double probability) {
        $$$setupUI$$$();

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 20, 5, 20);

        gbc.gridx = 0;
        gbc.gridy = 0;

        JPanel coords = CalcOverlayUtil.setupCoordsLabel(xNether, zNether, true, CalcOverlaySettings.getInstance().netherCoordsColor, CalcOverlaySettings.getInstance().negativeCoords);
        blindCorodsPanel.add(coords, gbc);

        JLabel probabilityLabel = CalcOverlayUtil.setupJLabel(String.format(Locale.US, "%.1f%%", probability * 100));
        probabilityLabel.setForeground(getColor(evaluation));
        gbc.gridx += 1;
        blindCorodsPanel.add(probabilityLabel, gbc);
    }

    private Color getColor(String evaluation) {
        float probability = 0;
        // there's no way to know the max probability of a < 400 blind in that ring
        // because the api sends the probability as a raw % and not in range of [0, 1] where 1 is max. probability for that ring+divine
        // (e.g. 10.2% for first ring without divine)
        // ... Which means the color can't be correct without knowing those values. (different divines/rings would mess it up)
        // Use evaluation to decide the color.
        switch (evaluation) {
            case "EXCELLENT": {
                probability = 1.0f;
                break;
            }
            case "HIGHROLL_GOOD": {
                probability = 0.9f;
                break;
            }
            case "HIGHROLL_OKAY": {
                probability = 0.7f;
                break;
            }
            case "BAD_BUT_IN_RING": {
                probability = 0.5f;
                break;
            }
            case "BAD": {
                probability = 0.2f;
                break;
            }
            case "NOT_IN_RING": {
                probability = 0.0f;
                break;
            }
        }

        return OverlayUtil.getColor(probability);
    }

    public static void main(String[] args) {

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        blindCorodsPanel = new JPanel();
        blindCorodsPanel.setLayout(new GridBagLayout());
        mainPanel.add(blindCorodsPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}

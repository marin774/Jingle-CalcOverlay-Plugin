package me.marin.calcoverlay.gui;

import lombok.Getter;
import me.marin.calcoverlay.util.OverlayUtil;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class HomePortalGUI {
    private JLabel homePortalIcon;
    private JLabel coordsLabel;
    @Getter
    private JPanel mainPanel;
    private JLabel probabilityLabel;

    public HomePortalGUI(int xNether, int zNether, String evaluation, double probability) {
        $$$setupUI$$$();

        homePortalIcon.setText(null);
        homePortalIcon.setVisible(Math.abs(xNether) < 75 && Math.abs(zNether) < 75);

        coordsLabel.setText("(" + xNether + ", " + zNether + ")");
        coordsLabel.setForeground(Color.WHITE);

        probabilityLabel.setText(String.format(Locale.US, "%.1f%%", probability * 100));
        probabilityLabel.setForeground(getColor(evaluation));
    }

    private void createUIComponents() {
        homePortalIcon = new JLabel(new ImageIcon(OverlayUtil.homeIconImage));
    }

    private Color getColor(String evaluation) {
        float probability = 0;
        // there's no way to know the max probability of a < 400 blind in that ring
        // because the api sends the probability as a % and not in range of [0, 1]
        // ... Which means the color can't be correct without knowing those values. (different divines/rings would mess it up)
        // Use evaluation to decide the color.
        switch (evaluation) {
            case "EXCELLENT": {
                probability = 1.0f;
                break;
            }
            case "HIGHROLL_GOOD": {
                probability = 0.9f;
                break;
            }
            case "HIGHROLL_OKAY": {
                probability = 0.7f;
                break;
            }
            case "BAD_BUT_IN_RING": {
                probability = 0.5f;
                break;
            }
            case "BAD": {
                probability = 0.2f;
                break;
            }
            case "NOT_IN_RING": {
                probability = 0.0f;
                break;
            }
        }

        return OverlayUtil.getColor(probability);
    }

    public static void main(String[] args) {

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(36, 36, 36, 36), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        coordsLabel = new JLabel();
        Font coordsLabelFont = this.$$$getFont$$$("Dialog", Font.BOLD, 68, coordsLabel.getFont());
        if (coordsLabelFont != null) coordsLabel.setFont(coordsLabelFont);
        coordsLabel.setText("<coords>");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 36, 0, 36);
        mainPanel.add(coordsLabel, gbc);
        probabilityLabel = new JLabel();
        Font probabilityLabelFont = this.$$$getFont$$$("Dialog", Font.BOLD, 68, probabilityLabel.getFont());
        if (probabilityLabelFont != null) probabilityLabel.setFont(probabilityLabelFont);
        probabilityLabel.setText("<10.0%>");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(probabilityLabel, gbc);
        homePortalIcon.setPreferredSize(new Dimension(96, 96));
        homePortalIcon.setText("<image>");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(homePortalIcon, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}

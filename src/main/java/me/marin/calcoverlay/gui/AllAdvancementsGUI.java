package me.marin.calcoverlay.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import lombok.Getter;
import me.marin.calcoverlay.io.AllAdvancementsSettings;
import me.marin.calcoverlay.io.CalcOverlaySettings;
import me.marin.calcoverlay.util.CalcOverlayUtil;
import me.marin.calcoverlay.util.data.Position;

import javax.swing.*;
import java.awt.*;
import java.util.Locale;
import java.util.Map;

public class AllAdvancementsGUI {

    @Getter
    private JPanel mainPanel;
    private JPanel allAdvancementsPanel;

    public static void main(String[] args) {

    }

    public AllAdvancementsGUI(Map<AllAdvancementsSettings.RowType, Position> positions) {
        $$$setupUI$$$();

        AllAdvancementsSettings settings = CalcOverlaySettings.getInstance().aaSettings;

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(18, 18, 5, 18);

        gbc.gridx = 0;
        gbc.gridy = 0;
        // Header row
        for (AllAdvancementsSettings.ColumnData columnData : settings.columnData) {
            if (columnData.isVisible()) {
                switch (columnData.getHeaderRow()) {
                    case TEXT:
                        JLabel text = setupJLabel(columnData.getColumnType().getOverlayDisplay());
                        gbc.anchor = GridBagConstraints.SOUTH;
                        allAdvancementsPanel.add(text, gbc);
                }
                gbc.gridx += 1;
            }
        }

        gbc.gridy = 1;
        final int vGap = 5;
        final int hGap = 20;
        for (AllAdvancementsSettings.RowData rowData : settings.rowData) {
            AllAdvancementsSettings.RowType rowType = rowData.getRowType();
            Position position = positions.get(rowData.getRowType());

            if (position == null || !rowData.isVisible()) {
                continue;
            }

            gbc.gridx = 0;
            for (AllAdvancementsSettings.ColumnData columnData : settings.columnData) {
                if (columnData.isVisible()) {
                    switch (columnData.getColumnType()) {
                        case ICONS:
                            JLabel iconLabel = new JLabel();
                            iconLabel.setIcon(new ImageIcon(rowType.getIcon()));
                            gbc.anchor = GridBagConstraints.NORTH;
                            gbc.insets = new Insets(gbc.gridy == 1 ? vGap : 0, hGap, vGap, hGap);
                            allAdvancementsPanel.add(iconLabel, gbc);
                            break;
                        case LOCATION:
                            JLabel locationLabel = setupJLabel(String.format("(%d, %d)", position.getXInOverworld(), position.getZInOverworld()));
                            gbc.anchor = GridBagConstraints.CENTER;
                            gbc.insets = new Insets(gbc.gridy == 1 ? vGap : 0, hGap, vGap, hGap);
                            allAdvancementsPanel.add(locationLabel, gbc);
                            break;
                        case NETHER_COORDS:
                            JLabel netherCoordsLabel = setupJLabel(String.format("(%d, %d)", Math.round(position.getXInOverworld() / 8.), Math.round(position.getZInOverworld() / 8.)));
                            netherCoordsLabel.setForeground(new Color(0xFFB4B4));
                            gbc.insets = new Insets(gbc.gridy == 1 ? vGap : 0, hGap, vGap, hGap);
                            gbc.anchor = GridBagConstraints.CENTER;
                            allAdvancementsPanel.add(netherCoordsLabel, gbc);
                            break;
                        case ANGLE:
                            JLabel angleLabel = setupJLabel(String.format(Locale.US, "%.1f", position.getTravelAngle()));
                            gbc.insets = new Insets(gbc.gridy == 1 ? vGap : 0, hGap, vGap, hGap);
                            gbc.anchor = GridBagConstraints.EAST;
                            allAdvancementsPanel.add(angleLabel, gbc);
                            break;
                    }
                    gbc.gridx += 1;
                }
            }
            gbc.gridy += 1;
        }
    }

    private JLabel setupJLabel(String text) {
        JLabel jLabel = new OutlinedJLabel();
        jLabel.setText(text);
        jLabel.setFont(CalcOverlayUtil.getFont());
        jLabel.setForeground(Color.WHITE);
        return jLabel;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        allAdvancementsPanel = new JPanel();
        allAdvancementsPanel.setLayout(new GridBagLayout());
        mainPanel.add(allAdvancementsPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
